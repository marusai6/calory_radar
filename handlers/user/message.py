from aiogram import types, F, Router, Bot
from aiogram.filters import Command
import html
from aiogram.fsm.context import FSMContext
import asyncpg
import configparser
from states.states import User
from aiogram.types import FSInputFile
from keyboards.user.kb import user_menu
import matplotlib.pyplot as plt

config = configparser.ConfigParser()
config.read('./config/config.ini')

user = config['Database']['db_user']
database = config['Database']['db_name']
host = config['Database']['db_host']
port = config['Database']['db_port']
password = None

router = Router()

@router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(f'üëã<b>{html.escape(message.from_user.full_name)},</b> –ø—Ä–∏–≤–µ—Ç!\n\n'
                         f'–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–≥–æ –±–ª—é–¥–∞,\n'
                        f'–∞ —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n\n'
                        f'–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞')
    await state.set_state(User.dish)

async def get_kbju(dish: str, massa: float):
    connect = await asyncpg.connect(user=user, database=database, host=host, port=port, password=password)
    query_1 = await connect.fetchrow('''select sum(dolya*kkal) as itog_kkal, sum(dolya*protein) as itog_protein, \
                                     sum(dolya*fat) as itog_fat, sum(dolya*carbohydrates) as itog_carb  from food_req \
                                    where rec_name like '%' || $1 || '%';''', dish.capitalize())
    query_2 = await connect.fetchrow('''select photo_path from food_req where rec_name like '%' || $1 || '%' limit 1; ''', \
                                     dish.capitalize())
    await connect.close()
    kalory = round(float(query_1['itog_kkal'])* massa / 100)
    protein = round(float(query_1['itog_protein'])* massa / 100)
    fat = round(float(query_1['itog_fat'])* massa / 100)
    carb = round(float(query_1['itog_carb'])* massa / 100)
    photo = query_2['photo_path']
    return kalory, protein, fat, carb, photo

def diagramma(protein, fat, carb):
    plt.clf()
    labels = ['–ë–µ–ª–∫–∏', '–ñ–∏—Ä—ã', '–£–≥–ª–µ–≤–æ–¥—ã']
    values = [protein, fat, carb]
    colors = ['plum','bisque','skyblue']
    plt.pie(values, labels=labels, colors=colors, autopct='%1.1f%%')
    plt.axis('equal')
    plt.savefig('./input/diagram.png')

@router.message(User.dish, F.text)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ dish
async def handle_dish(message: types.Message, state: FSMContext):
    await state.update_data(dish=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
    await message.answer('–í–≤–µ–¥–∏ –≤–µ—Å –±–ª—é–¥–∞ –≤ –≥—Ä–∞–º–º–∞—Ö')
    await state.set_state(User.massa)

@router.message(User.massa, F.text)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ massa
async def handle_massa(message: types.Message, state: FSMContext, bot: Bot):
    try:
        massa = float(message.text)
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è dish)
        dish = data.get('dish', '')
        
        kalory, protein, fat, carb, photo = await get_kbju(dish, massa)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—á–µ—Ç
        photo = FSInputFile(photo)
        await bot.send_photo(
            chat_id = message.chat.id,
            photo = photo,
            caption=f"üçΩ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞: {kalory}\nüî∏–ë–µ–ª–∫–æ–≤ {protein} –≥—Ä\nüî∏–ñ–∏—Ä–æ–≤ {fat} –≥—Ä\n‚ô¶Ô∏è–£–≥–ª–µ–≤–æ–¥–æ–≤ {carb} –≥—Ä"
        )
        diagramma(protein, fat, carb)
        await bot.send_photo(chat_id=message.chat.id, photo=FSInputFile('./input/diagram.png'))
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –±–ª—é–¥–∞?", reply_markup=user_menu)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ –±–ª—é–¥–∞')
    except TypeError:
        await message.answer('–¢–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ')

@router.callback_query(F.data == "No")
async def send_value(callback: types.CallbackQuery):
    await callback.answer(
        text="–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!",
        show_alert=True
    )

@router.callback_query(F.data == "Yes")
async def send_value(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text="–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
        show_alert=True
    )
    await state.set_state(User.dish)